<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="https://kw7oe.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kw7oe.github.io/" rel="alternate" type="text/html" /><updated>2018-11-20T14:30:37+08:00</updated><id>https://kw7oe.github.io/feed.xml</id><title type="html">kw7oe</title><subtitle>To be figured out soon.</subtitle><entry><title type="html">Minimal Elixir Web Application with Plug and Cowboy</title><link href="https://kw7oe.github.io/elixir/2018/10/14/minimal-web-application-with-plug-and-cowboy.html" rel="alternate" type="text/html" title="Minimal Elixir Web Application with Plug and Cowboy" /><published>2018-10-14T15:32:00+08:00</published><updated>2018-10-14T15:32:00+08:00</updated><id>https://kw7oe.github.io/elixir/2018/10/14/minimal-web-application-with-plug-and-cowboy</id><content type="html" xml:base="https://kw7oe.github.io/elixir/2018/10/14/minimal-web-application-with-plug-and-cowboy.html">&lt;p&gt;It is interesting to learn things from scratch. Coming from Ruby
background, I was curious what is the equivalent of Sinatra in
Elixir. It’s called Plug. It is what Phoenix build on top of.&lt;/p&gt;

&lt;p&gt;Using Sinatra, we can write a quick and simple web server with the following
code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sinatra'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:json&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;message: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How can we achive that in Elixir? With &lt;code class=&quot;highlighter-rouge&quot;&gt;Plug&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Cowboy&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This article is based on Elixir v1.7.3&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First of all, let’s create a &lt;code class=&quot;highlighter-rouge&quot;&gt;mix&lt;/code&gt; project and change directory into it.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix new sample_app
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sample_app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; file with your favourite editor. And add the dependencies as
follow:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cowboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;~&amp;gt; 2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;~&amp;gt; 1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# {:dep_from_hexpm, &quot;~&amp;gt; 0.3.0&quot;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# {:dep_from_git, git: &quot;https://github.com/elixir-lang/my_dep.git&quot;, tag: &quot;0.1.0&quot;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We add &lt;code class=&quot;highlighter-rouge&quot;&gt;Plug&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Cowboy&lt;/code&gt; as dependencies because &lt;code class=&quot;highlighter-rouge&quot;&gt;Cowboy&lt;/code&gt; act as  a web server and
&lt;code class=&quot;highlighter-rouge&quot;&gt;Plug&lt;/code&gt; on the other hand, act as a connection adapter to the web server.&lt;/p&gt;

&lt;p&gt;Before we proceed, let’s get all the dependencies first by running the
following command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix deps.get
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-plug&quot;&gt;Using Plug&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Plug&lt;/code&gt; can be complicated if we don’t understand it. The
best way to understand it, is to, read the &lt;a href=&quot;https://github.com/elixir-plug/plug#hello-world&quot;&gt;documentation&lt;/a&gt; &lt;em&gt;(In fact, all the
steps mentioned above and below are already available in the documentation)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So to get a taste of how &lt;code class=&quot;highlighter-rouge&quot;&gt;Plug&lt;/code&gt; works, let’s just copy and paste the code from
the documentation and make some changes. Let’s create &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/my_plug.ex&lt;/code&gt; and
and add in the code.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch lib/my_plug.ex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SampleApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyPlug&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Conn&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# initialize options&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_opts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_resp_content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s try to run the code.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex -S mix

iex(1)&amp;gt; {:ok, _} = Plug.Adapters.Cowboy2.http SampleApp.MyPlug, []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s go and visit &lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot;&gt;http://localhost:4000&lt;/a&gt;.
You should be able to see a “Hello World” on your browser.
We just start the &lt;code class=&quot;highlighter-rouge&quot;&gt;cowboy&lt;/code&gt; web server in &lt;code class=&quot;highlighter-rouge&quot;&gt;iex&lt;/code&gt;, by passing it our &lt;code class=&quot;highlighter-rouge&quot;&gt;Plug&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;
empty arguments.&lt;/p&gt;

&lt;h2 id=&quot;thats-all&quot;&gt;That’s all&lt;/h2&gt;
&lt;p&gt;Yes, you have wrote a simple web server using Elixir.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wait, wait, but how can I run my server through command line? I have to run
&lt;code class=&quot;highlighter-rouge&quot;&gt;iex -S mix&lt;/code&gt; and start the &lt;code class=&quot;highlighter-rouge&quot;&gt;Cowboy&lt;/code&gt; server manually every time?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nope.&lt;/strong&gt; We can make it an OTP application. So that we just need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;mix
run --no-halt&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;iex -S mix&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;cowboy&lt;/code&gt; server will boot up itself.&lt;/p&gt;

&lt;h2 id=&quot;basic-of-otp-application&quot;&gt;Basic of OTP Application&lt;/h2&gt;

&lt;p&gt;OTP application is basically a component that has predefined behaviour. It can
be started, loaded or stopped. To create an OTP application in Elixir, we
use the &lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; module and implements some of the expected behavior. For
more you can always refer to the documentation of &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;Application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So let’s create a simple application first.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch lib/app.ex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SampleApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Starting application&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;strategy:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:one_for_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if you run &lt;code class=&quot;highlighter-rouge&quot;&gt;mix run --no-halt&lt;/code&gt;, you still won’t see the “Starting
application” output yet. This is because we haven’t configure our &lt;code class=&quot;highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt;
yet.&lt;/p&gt;

&lt;p&gt;To make &lt;code class=&quot;highlighter-rouge&quot;&gt;mix&lt;/code&gt; run our application, we have to add the following code into
&lt;code class=&quot;highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;extra_applications:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;mod:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SampleApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Add in this line of code&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, if we run &lt;code class=&quot;highlighter-rouge&quot;&gt;mix run --no-halt&lt;/code&gt;, we can finally see the “Starting
application…” output. It also means we have sucessfully start an OTP
application.&lt;/p&gt;

&lt;h2 id=&quot;starting-cowboy-server-automatically&quot;&gt;Starting Cowboy Server automatically&lt;/h2&gt;

&lt;p&gt;Remember how we run our &lt;code class=&quot;highlighter-rouge&quot;&gt;cowboy&lt;/code&gt; server in &lt;code class=&quot;highlighter-rouge&quot;&gt;iex&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iex -S mix

iex(1)&amp;gt; {:ok, _} = Plug.Adapters.Cowboy2.http SampleApp.MyPlug, []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now after knowing how to start our OTP application with &lt;code class=&quot;highlighter-rouge&quot;&gt;mix run --no-halt&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;iex -S mix&lt;/code&gt;, we need to start our &lt;code class=&quot;highlighter-rouge&quot;&gt;cowboy&lt;/code&gt; server after our application is
started.&lt;/p&gt;

&lt;p&gt;To do this, we need to modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;start/2&lt;/code&gt; method in the &lt;code class=&quot;highlighter-rouge&quot;&gt;app.ex&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Define workers and child supervisors to be supervised&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Adapters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cowboy2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;scheme:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;plug:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SampleApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyPlug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;options:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Supervisor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;strategy:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:one_for_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What we are doing here is to specify the child spec of the child process, which
is our &lt;code class=&quot;highlighter-rouge&quot;&gt;cowboy&lt;/code&gt;. A child specification basically tell the supervisor how to
start, restart or shutdown the child process. The above code is also mentioned
in the documentation of Plug under &lt;a href=&quot;https://hexdocs.pm/plug/readme.html#supervised-handlers&quot;&gt;Supervised handlers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, if we run the &lt;code class=&quot;highlighter-rouge&quot;&gt;mix run --no-halt&lt;/code&gt;, and visit &lt;a href=&quot;http://localhost:4000&quot; target=&quot;_blank&quot;&gt;http://localhost:4000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our web application is now online.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;If you’re a beginner to OTP or Elixir, there are a lots of stuff underneath
that I didn’t cover well. This is my first blog post on Elixir. It might be lacking.
So here are some other resources you can refer to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://elixirschool.com/en/lessons/specifics/plug/&quot;&gt;Elixir School Plug&lt;/a&gt;&lt;a href=&quot;#one&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hexdocs.pm/plug/readme.html&quot;&gt;Plug documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;Application documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;Supervisor documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;The source code of the project is available at &lt;a href=&quot;https://github.com/kw7oe/plug_sample_app&quot;&gt;GitHub&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;small id=&quot;one&quot;&gt;To be honest, &lt;strong&gt;Elixir School does a better job in explaining this topic&lt;/strong&gt;.
The way I’m writing is based on how my thought process flow, so it might be
different and unstructured. This post also covers less topics about using
Plug compared to Elixir School.
&lt;/small&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">It is interesting to learn things from scratch. Coming from Ruby background, I was curious what is the equivalent of Sinatra in Elixir. It’s called Plug. It is what Phoenix build on top of.</summary></entry><entry><title type="html">A note on`application` in mix.exs starting from Elixir 1.4</title><link href="https://kw7oe.github.io/elixir/2018/10/03/a-note-on-in-mix-exs-starting-from-elixir-1-4.html" rel="alternate" type="text/html" title="A note on`application` in mix.exs starting from Elixir 1.4" /><published>2018-10-03T21:45:00+08:00</published><updated>2018-10-03T21:45:00+08:00</updated><id>https://kw7oe.github.io/elixir/2018/10/03/a-note-on-in-mix-exs-starting-from-elixir-1-4</id><content type="html" xml:base="https://kw7oe.github.io/elixir/2018/10/03/a-note-on-in-mix-exs-starting-from-elixir-1-4.html">&lt;p&gt;Starting from Elixir 1.4, we don’t need to specify our application lists in
&lt;code class=&quot;highlighter-rouge&quot;&gt;application&lt;/code&gt;. It is automatically inferred from our dependencies. &lt;em&gt;(Check the
release notes &lt;a href=&quot;https://elixir-lang.org/blog/2017/01/05/elixir-v1-4-0-released/&quot;&gt;here&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Do note that &lt;strong&gt;it only automatically infer the application lists if the
&lt;code class=&quot;highlighter-rouge&quot;&gt;:applications&lt;/code&gt; key is empty.&lt;/strong&gt; If you had already declared your it in your
&lt;code class=&quot;highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Will be automatically inferred starting&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# from Elixir 1.4, if it is empty.&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;applications:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cowboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Be sure to clear it to utilize this feature.&lt;/p&gt;

&lt;p&gt;Below are the detailed story on how I came across this.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Disclaimer: The point of this article is summed up above, skip the part below if you’re busy.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;the-story&quot;&gt;The Story&lt;/h3&gt;

&lt;p&gt;Recently, I have been writing a simple Plug web application and came across the
need to use an external database.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;PostgreSQl&lt;/code&gt; is the thing that come up to my mind.&lt;/p&gt;

&lt;p&gt;Hence, I went over the &lt;a href=&quot;https://hexdocs.pm/ecto/getting-started.html#content&quot;&gt;Ecto documentation&lt;/a&gt; and run through the setup in the
application. After going through the steps, and finally run &lt;code class=&quot;highlighter-rouge&quot;&gt;iex -S mix&lt;/code&gt;, an
error arise.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...failed to start child: App.Repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I check my &lt;code class=&quot;highlighter-rouge&quot;&gt;config.exs&lt;/code&gt;. Nothing wrong.&lt;/p&gt;

&lt;p&gt;So, I go through the documentation again and again, to check if I miss out anything.
No, nothing wrong. The documentation didn’t mentioned the need to add &lt;code class=&quot;highlighter-rouge&quot;&gt;ecto&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;postgrex&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;application&lt;/code&gt;.  After googling around, someone mentioned
that adding it solve the issues.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I tried, it worked.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But I don’t know why. &lt;em&gt;The documentation can’t be wrong right?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, I create a new test application and follow the documentation again.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And, it works.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, I delete this line of code in my &lt;code class=&quot;highlighter-rouge&quot;&gt;mix.exs&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;applications:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cowboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;And, it works.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-why&quot;&gt;The Why&lt;/h3&gt;
&lt;p&gt;Hence, I guess that Mix actaully automatically start the applications needed
for us. So, I search through the documentations of different version of Mix
&lt;em&gt;(&lt;a href=&quot;https://hexdocs.pm/mix/1.3.4/Mix.Tasks.Compile.App.html#content&quot;&gt;1.4.5&lt;/a&gt; vs &lt;a href=&quot;https://hexdocs.pm/mix/1.3.4/Mix.Tasks.Compile.App.html#content&quot;&gt;1.3.4&lt;/a&gt;)&lt;/em&gt;, and finally found out that since Elixir 1.4,
Mix has this new feature. It is also mentioned in the &lt;a href=&quot;https://elixir-lang.org/blog/2017/01/05/elixir-v1-4-0-released/&quot;&gt;release notes of Elixir 1.4&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However there is one condition. &lt;strong&gt;It only automatically infer the applications list if the
&lt;code class=&quot;highlighter-rouge&quot;&gt;:applications&lt;/code&gt; key is empty.&lt;/strong&gt; That explains why it didn’t work in my
application because I already declared the list manually, as shown below:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;mod:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;extra_applications:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Can be removed for Elixir &amp;gt;= 1.4.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Since it is automatically inferred.&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;applications:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cowboy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-lessons&quot;&gt;The Lessons&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Application lists can be automatically inferred in for Elixir &amp;gt;= 1.4&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Documentation can be wrong. But, most of the time, you might be the one who
are in fault.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Read release notes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading through it.&lt;/p&gt;</content><author><name></name></author><summary type="html">Starting from Elixir 1.4, we don’t need to specify our application lists in application. It is automatically inferred from our dependencies. (Check the release notes here)</summary></entry><entry><title type="html">Using AWK to extract generated file from jekyll-compose</title><link href="https://kw7oe.github.io/awk/2018/09/09/using-awk-to-extract-generated-file-from-jekyll-compose.html" rel="alternate" type="text/html" title="Using AWK to extract generated file from jekyll-compose" /><published>2018-09-09T22:25:00+08:00</published><updated>2018-09-09T22:25:00+08:00</updated><id>https://kw7oe.github.io/awk/2018/09/09/using-awk-to-extract-generated-file-from-jekyll-compose</id><content type="html" xml:base="https://kw7oe.github.io/awk/2018/09/09/using-awk-to-extract-generated-file-from-jekyll-compose.html">&lt;p&gt;Recently, I have been using &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; to make notes. I use &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-compose&lt;/code&gt;
gem to create post using command line. However, the auto open generated file
features isn’t working in my machine after the setup.&lt;/p&gt;

&lt;p&gt;After a few times on manually opening the generated files in &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;, I decided
to write a quick shell script to solve this issue.&lt;/p&gt;

&lt;h3 id=&quot;scenario&quot;&gt;Scenario&lt;/h3&gt;
&lt;p&gt;To generate a new post with &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-compose&lt;/code&gt;, we can run the following command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll post &amp;lt;TITLE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and it will output the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Configuration file: /Users/kai/Desktop/notes/_config.yml
New post created at _posts/&amp;lt;DATE&amp;gt;-&amp;lt;TITLE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, to generate and open the file involves the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Run the command to generate post&lt;/li&gt;
  &lt;li&gt;Extract the file path&lt;/li&gt;
  &lt;li&gt;Open the file using &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;awk&quot;&gt;awk&lt;/h3&gt;
&lt;p&gt;I came across &lt;code class=&quot;highlighter-rouge&quot;&gt;AWK&lt;/code&gt; from &lt;a href=&quot;https://twitter.com/b0rk/status/1000604334026055681&quot;&gt;Julia Evans zine&lt;/a&gt;. It came to my mind again when I want
to extract the file path from the output of the command.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AWK&lt;/code&gt; is a programming language designed for text-processing. It has very basic
yet important command &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; to output the text. What makes &lt;code class=&quot;highlighter-rouge&quot;&gt;AWK&lt;/code&gt; different is
it breaks each line into columns &lt;em&gt;(seperated by space, which can be configure)&lt;/em&gt;, where:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print $1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;means output the first column.&lt;/p&gt;

&lt;p&gt;We can also add in a specific condition in front of the &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; command so that
it only execute if the condition is true.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CONDITION {print $1}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;After knowing some basic of &lt;code class=&quot;highlighter-rouge&quot;&gt;AWK&lt;/code&gt;, we can extract the file path with the
following actions.&lt;/p&gt;

&lt;h4 id=&quot;1-extraction&quot;&gt;1. Extraction&lt;/h4&gt;
&lt;p&gt;Hence, to extract out the file path from the line &lt;code class=&quot;highlighter-rouge&quot;&gt;New post created at _posts/&amp;lt;DATE&amp;gt;-&amp;lt;TITLE&amp;gt;&lt;/code&gt;,
we can use the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo 'New post created at _posts/&amp;lt;DATE&amp;gt;-&amp;lt;TITLE&amp;gt;' | awk '{print $5}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$5&lt;/code&gt; is used since the file path is the fifth column of the line.&lt;/p&gt;

&lt;h4 id=&quot;2-only-extract-second-line&quot;&gt;2. Only Extract Second Line&lt;/h4&gt;
&lt;p&gt;Since we just wanted to extract the second line of the command output, the
command above is not enough. What we really wanted is to say:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;if the line is second row, then we extract it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To achieve that in &lt;code class=&quot;highlighter-rouge&quot;&gt;AWK&lt;/code&gt;, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;AWK&lt;/code&gt; built-in variables &lt;code class=&quot;highlighter-rouge&quot;&gt;FNR&lt;/code&gt;, which
refers to the current line number of the file, to form a condition.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo -e &quot;Configuration file: /Users/kai/Desktop/notes/_config.yml\nNew post created at _posts/&amp;lt;DATE&amp;gt;-&amp;lt;TITLE&amp;gt;&quot; | awk 'FNR==2{ print $5 }'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;AWK&lt;/code&gt; to print specific column of lines with &lt;code class=&quot;highlighter-rouge&quot;&gt;awk {print $N}&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;You can add condition in front of the &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; command if needed.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AWK&lt;/code&gt; contains a handful of built-in variables that are useful for
text-processing.&lt;/li&gt;
  &lt;li&gt;Code snippet to generate and open the file.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;newpost&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  vim &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;
 bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll post &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; |
 &lt;span class=&quot;c&quot;&gt;# substr is used to remove the ending '.' of the extracted string&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'FNR == 2{print substr($5, 1, length($5) - 1)}'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you are interested in more command line tools, you can consider purchase
&lt;a href=&quot;https://twitter.com/b0rk&quot;&gt;Julia Evans&lt;/a&gt; &lt;a href=&quot;https://gumroad.com/l/bite-size-command-line&quot;&gt;Byte Size Command Line&lt;/a&gt; zine series.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It turns out the reason why my &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-compose&lt;/code&gt; configuration doesn’t work is
  because of a single typo of &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;. Instead of:&lt;/p&gt;
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# The correct one&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jekyll_compose&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;auto_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;I use:&lt;/p&gt;
    &lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# The wrong one&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jekyll-compose&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;auto_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Recently, I have been using jekyll to make notes. I use jekyll-compose gem to create post using command line. However, the auto open generated file features isn’t working in my machine after the setup.</summary></entry><entry><title type="html">A note about using ‘fetch’ in JS</title><link href="https://kw7oe.github.io/javascript/2018/04/11/a-note-about-using-fetch-in-js.html" rel="alternate" type="text/html" title="A note about using 'fetch' in JS" /><published>2018-04-11T00:00:00+08:00</published><updated>2018-04-11T00:00:00+08:00</updated><id>https://kw7oe.github.io/javascript/2018/04/11/a-note-about-using-fetch-in-js</id><content type="html" xml:base="https://kw7oe.github.io/javascript/2018/04/11/a-note-about-using-fetch-in-js.html">&lt;p&gt;Another story about fixing bug. This story is related to the native web
API &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;, which is used to make request.&lt;/p&gt;

&lt;h3 id=&quot;backstory&quot;&gt;Backstory&lt;/h3&gt;
&lt;p&gt;After serveral days of having my first production application online,
my client inform me that, the application has a bug, &lt;em&gt;again&lt;/em&gt;.
The button was not working as expected for one of the users.
Long story short, we found out that the bug occurs in iOS 10.2.1.
So, I downloaded the Simulator for iOS 10.2 to start debugging.&lt;/p&gt;

&lt;h3 id=&quot;issue&quot;&gt;Issue&lt;/h3&gt;
&lt;p&gt;It turns out that &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; is not supported in iOS 10.2. In this
case, I can:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;replace &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;axios&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;use &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; polyfill&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to solve the issue.&lt;/p&gt;

&lt;h3 id=&quot;lesson-learned&quot;&gt;Lesson Learned&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; is not supported for iOS 10.2 and below.&lt;/li&gt;
  &lt;li&gt;How to debug a web application using Simulator.&lt;/li&gt;
  &lt;li&gt;Having more information about the environment when the bug occured
is always helpful.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Another story about fixing bug. This story is related to the native web API fetch, which is used to make request.</summary></entry><entry><title type="html">Using Ruby next in map</title><link href="https://kw7oe.github.io/ruby/2018/03/28/using-ruby-next-in-map.html" rel="alternate" type="text/html" title="Using Ruby next in map" /><published>2018-03-28T00:00:00+08:00</published><updated>2018-03-28T00:00:00+08:00</updated><id>https://kw7oe.github.io/ruby/2018/03/28/using-ruby-next-in-map</id><content type="html" xml:base="https://kw7oe.github.io/ruby/2018/03/28/using-ruby-next-in-map.html">&lt;p&gt;While I was refactoring the code base of my client application,
I came accross a code block, similar to this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'status'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IGNORED_STATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think, “Ha, I can replace &lt;code class=&quot;highlighter-rouge&quot;&gt;each&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; here.”&lt;/p&gt;

&lt;p&gt;I go ahead, and make the changes.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'status'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;IGNORED_STATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'value'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Little did I know that,
this will  break the production system in the future.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After the application went live, after a few hours, my client
reported that there were errors in the system disrupting the user from
using it normally. After some investigation, I found out that it is
caused by &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. I patched the error quickly by using &lt;code class=&quot;highlighter-rouge&quot;&gt;compact&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;From something like this:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;timeslots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_timeslots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# [1, nil, 2, 3]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;timeslots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;timeslots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_timeslots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compact&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# [1, 2, 3]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;timeslots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Later on, diving into the source code, I found out that the &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;
is introduced by my own refactored code. It turns out that, inside
a &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, using &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; will return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; instead of skipping it
altogether. I only learn this when I came across this
&lt;a href=&quot;http://code-worrier.com/blog/map-and-next/&quot;&gt;blog article&lt;/a&gt;.
For example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Return the value&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; return [1, nil, 3, nil, 5, nil]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; instead of [1, 3, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, thanks myself for not writing test ahead before refactoring the
code base, I get to learn this the hard way.&lt;/p&gt;

&lt;h3 id=&quot;lesson-learned&quot;&gt;Lesson Learned&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Always write test before refactoring.&lt;/li&gt;
  &lt;li&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;next&lt;/code&gt; in a &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; return &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array#compact&lt;/code&gt; can be used to remove &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; elements.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">While I was refactoring the code base of my client application, I came accross a code block, similar to this:</summary></entry><entry><title type="html">Ruby fetch</title><link href="https://kw7oe.github.io/ruby/2017/11/04/ruby-fetch.html" rel="alternate" type="text/html" title="Ruby fetch" /><published>2017-11-04T22:43:41+08:00</published><updated>2017-11-04T22:43:41+08:00</updated><id>https://kw7oe.github.io/ruby/2017/11/04/ruby-fetch</id><content type="html" xml:base="https://kw7oe.github.io/ruby/2017/11/04/ruby-fetch.html">&lt;p&gt;Today, when I am refactoring a CLI I wrote, I came across a code block  where I check whether an index exists in an array &lt;em&gt;(turns out I don’t actually need it, I can just access the array and check if the value is &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;)&lt;/em&gt;. I went to search of Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; documentation to see if such method exists. Then, I came across &lt;code class=&quot;highlighter-rouge&quot;&gt;Array#fetch&lt;/code&gt; while scrolling through the documetantion.&lt;/p&gt;

&lt;h3 id=&quot;arrayfetch&quot;&gt;Array#fetch&lt;/h3&gt;

&lt;p&gt;In Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; is a method that get the value at position &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; of an array. The difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;.[]&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; throws an &lt;code class=&quot;highlighter-rouge&quot;&gt;IndexError&lt;/code&gt; if the index doesn’t exists.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; IndexError: index 4 outside of array bounds: -3...3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we take a look at the Ruby documentation of &lt;a href=&quot;https://ruby-doc.org/core-2.4.0/Array.html#method-i-fetch&quot;&gt;Array#fetch&lt;/a&gt;, we’ll see that &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; has the following definitions:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which means, we can also provide a default value as the result if the index isn’t found. For example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or provide a block to be executed if the index is not found:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The index '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' is not found&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;The index '4' is not found&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;possible-use-case&quot;&gt;Possible Use Case&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array#fetch&lt;/code&gt; can be used when we need to provide a default value if the index is not found.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Peter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Jane'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'John Wick'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User not found'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;User not found&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example, we have a method to allow to search other users &lt;em&gt;(which store in array)&lt;/em&gt; and print out the name as a response. To handle the scenario where the user is not found, we can implement it by providing a default value with &lt;code class=&quot;highlighter-rouge&quot;&gt;Array#fetch&lt;/code&gt;. No additional handling code is required.&lt;/p&gt;

&lt;p&gt;If you know the other possible use cases of &lt;code class=&quot;highlighter-rouge&quot;&gt;Array#fetch&lt;/code&gt;, feel free to share it out.&lt;/p&gt;</content><author><name></name></author><summary type="html">Today, when I am refactoring a CLI I wrote, I came across a code block where I check whether an index exists in an array (turns out I don’t actually need it, I can just access the array and check if the value is nil). I went to search of Ruby Array documentation to see if such method exists. Then, I came across Array#fetch while scrolling through the documetantion.</summary></entry><entry><title type="html">Register in Vim</title><link href="https://kw7oe.github.io/vim/2017/10/24/register-in-vim.html" rel="alternate" type="text/html" title="Register in Vim" /><published>2017-10-24T22:05:00+08:00</published><updated>2017-10-24T22:05:00+08:00</updated><id>https://kw7oe.github.io/vim/2017/10/24/register-in-vim</id><content type="html" xml:base="https://kw7oe.github.io/vim/2017/10/24/register-in-vim.html">&lt;p&gt;For the past months, I have started to use &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; in some occasions. One day, I came across a vim video, &lt;a href=&quot;https://www.youtube.com/watch?v=3TX3kV3TICU&quot; target=&quot;_blank&quot;&gt;“Let Vim Do the Typing”&lt;/a&gt;, and discover the use of &lt;strong&gt;register&lt;/strong&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;. Basically, the concept of register in &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; is very similar to the register in our computer. It is a temporary memory space for &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; to store text.&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-it&quot;&gt;How to use it?&lt;/h3&gt;
&lt;p&gt;In normal mode, &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;r&lt;/code&gt; will allow us to select the register &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;. The charcter after &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; is the register you selected. You can choose any register you like from &lt;code class=&quot;highlighter-rouge&quot;&gt;a-z&lt;/code&gt;.To check the content of every register, use the command &lt;code class=&quot;highlighter-rouge&quot;&gt;:reg&lt;/code&gt;. For specific registers, just provide the register name as arguments to the command, e.g &lt;code class=&quot;highlighter-rouge&quot;&gt;:reg r&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In insert mode, you can insert the content of a register by &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl-r&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;. You’ll notice the current cursor will turn into &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl-r&lt;/code&gt; is pressed.&lt;/p&gt;

&lt;h3 id=&quot;basic-usage&quot;&gt;Basic Usage&lt;/h3&gt;
&lt;p&gt;We can copy any text and save it to a specific register, which persists even after &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt; is quit. For example, we can yanked/copy current link and store to register &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;eyy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can also paste the content of register &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;ep&lt;/code&gt;. Or, go into insert mode and &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl-r&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt; to paste the content of the selected register.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;This is just a basic introduction of register in &lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;. There is still a lots of details and usage of register I didn’t cover in this post. For more details, feel free to refer to the resources below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.brianstorti.com/vim-registers/&quot; target=&quot;_blank&quot;&gt;Vim registers: The basics and beyond&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1497958/how-do-i-use-vim-registers&quot; target=&quot;_blank&quot;&gt;How do I use vim registers?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">For the past months, I have started to use vim in some occasions. One day, I came across a vim video, “Let Vim Do the Typing”, and discover the use of register in vim. Basically, the concept of register in vim is very similar to the register in our computer. It is a temporary memory space for vim to store text.</summary></entry><entry><title type="html">Vue.js: Add component on click</title><link href="https://kw7oe.github.io/vue.js/2017/10/17/vue-js-add-component-on-click.html" rel="alternate" type="text/html" title="Vue.js: Add component on click" /><published>2017-10-17T23:00:00+08:00</published><updated>2017-10-17T23:00:00+08:00</updated><id>https://kw7oe.github.io/vue.js/2017/10/17/vue-js-add-component-on-click</id><content type="html" xml:base="https://kw7oe.github.io/vue.js/2017/10/17/vue-js-add-component-on-click.html">&lt;p&gt;I have been working on a project which uses &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.js&lt;/code&gt; for front end. I came across a scenario where we need to allow user to add more entry in their form.&lt;/p&gt;

&lt;h3 id=&quot;initial-approach&quot;&gt;Initial Approach&lt;/h3&gt;
&lt;p&gt;The first thought that come to my mind will be get the &lt;code class=&quot;highlighter-rouge&quot;&gt;div#id&lt;/code&gt; of the element and &lt;code class=&quot;highlighter-rouge&quot;&gt;append&lt;/code&gt; it dynamically through &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'parent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Assuming this return an Node element&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, since we are using &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.js&lt;/code&gt;, it doesn’t feel natural to approach it this way.&lt;/p&gt;

&lt;h3 id=&quot;with-vuejs&quot;&gt;With Vue.js&lt;/h3&gt;

&lt;p&gt;Instead, we can utilize the functionality of &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.js&lt;/code&gt;, by using &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;v-on:click&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index in count&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;:key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      {{ index }}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-on:click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addComponent&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Add&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;addComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;Declare a counter
    &lt;ul&gt;
      &lt;li&gt;We first declare a data &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; with the initial value of 1.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; to generate components
    &lt;ul&gt;
      &lt;li&gt;In our &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; tag, We loop through the component with &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for=&quot;index in count&quot;&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;With the &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; shorthands, &lt;code class=&quot;highlighter-rouge&quot;&gt;vue&lt;/code&gt; will generate from &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; times of the component. In this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; act like range. For more detailed explanation, refer to the official documetation: &lt;a href=&quot;https://vuejs.org/v2/guide/list.html#v-for-with-a-Range&quot; target=&quot;_blank&quot;&gt;v-for with a Range&lt;/a&gt;).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Button to increase &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Then we create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Add&lt;/code&gt; button that execute &lt;code class=&quot;highlighter-rouge&quot;&gt;addComponent&lt;/code&gt; on click. The &lt;code class=&quot;highlighter-rouge&quot;&gt;addComponent&lt;/code&gt; method is fairly straightforward, just increase the &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; by 1.&lt;/li&gt;
      &lt;li&gt;When the user click the &lt;code class=&quot;highlighter-rouge&quot;&gt;Add&lt;/code&gt; button, the &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; will be increased by 1, thus cause &lt;code class=&quot;highlighter-rouge&quot;&gt;Vue.js&lt;/code&gt; to render additional component in our view.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;With the combination of, &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; act as counter. &lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt; to generate the components, and &lt;code class=&quot;highlighter-rouge&quot;&gt;addComponent&lt;/code&gt; method to increase the &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;, we are able to render new component into our view when the user click the button.&lt;/p&gt;

&lt;p&gt;P.S. The solution is inspired by this &lt;a href=&quot;https://forum-archive.vuejs.org/topic/747/clone-component-when-click-add-more/3&quot; target=&quot;_blank&quot;&gt;forum post&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I have been working on a project which uses Vue.js for front end. I came across a scenario where we need to allow user to add more entry in their form.</summary></entry><entry><title type="html">Ruby .() notation</title><link href="https://kw7oe.github.io/ruby/2017/10/15/ruby-dot-parentheses-notation.html" rel="alternate" type="text/html" title="Ruby .() notation" /><published>2017-10-15T18:12:19+08:00</published><updated>2017-10-15T18:12:19+08:00</updated><id>https://kw7oe.github.io/ruby/2017/10/15/ruby-dot-parentheses-notation</id><content type="html" xml:base="https://kw7oe.github.io/ruby/2017/10/15/ruby-dot-parentheses-notation.html">&lt;p&gt;In Ruby, &lt;code class=&quot;highlighter-rouge&quot;&gt;.()&lt;/code&gt; is a syntatic sugar for &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Hello World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, we declare a &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; class and &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; method in the class. With this, we can later execute &lt;code class=&quot;highlighter-rouge&quot;&gt;Person.new.()&lt;/code&gt; to call the &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Note that, we need to initialize the &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; object first by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;, since the &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; is a instance method.&lt;/p&gt;

&lt;p&gt;If we wanted to just call by &lt;code class=&quot;highlighter-rouge&quot;&gt;Person.()&lt;/code&gt;, we can do it this way:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; &quot;Hello World&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Some programming languages such as Python, Swift and Scala initalize object by &lt;code class=&quot;highlighter-rouge&quot;&gt;Person()&lt;/code&gt;. In Ruby, we can’t override the &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt; operator to achieve the same effect &lt;em&gt;(see this &lt;a href=&quot;https://stackoverflow.com/questions/24351218/how-to-create-an-object-in-ruby-without-using-new?answertab=oldest#tab-top&quot;&gt;StackOverflow question&lt;/a&gt;)&lt;/em&gt;. However, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;.()&lt;/code&gt; to achieve a similar result:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Peter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;age: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; #&amp;lt;Person:0x00007f991b80b8d8 @name=&quot;Peter&quot;, @age=12&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another way is to use metaprogramming in Ruby. Take a look at this &lt;a href=&quot;https://stackoverflow.com/a/24356542&quot;&gt;StackOverflow answer&lt;/a&gt; to find out how.&lt;/p&gt;</content><author><name></name></author><summary type="html">In Ruby, .() is a syntatic sugar for call method.</summary></entry></feed>